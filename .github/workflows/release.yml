name: Create or Update Tag and Release

on:
  workflow_run:
    workflows: ["Launch release.yml after closed PR"]
    types:
      - completed
  workflow_dispatch:

jobs:
  create_or_update_tag_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Fetch Latest PR Info and Prepare Tag
        id: prepare_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the latest merged PR title and body using GitHub CLI
          PR_TITLE=$(gh pr list --state merged --limit 1 --json title --jq '.[0].title')
          PR_BODY=$(gh pr list --state merged --limit 1 --json body --jq '.[0].body')
          TAG_NAME=$(echo "$PR_TITLE" | sed 's/ /_/g') # Replace spaces with underscores in the tag name for consistency

          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Check and Update Tag
        id: update_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag '$TAG_NAME' already exists. Deleting and recreating it."

            # Delete the existing tag locally and remotely
            git tag -d "$TAG_NAME"
            git push --delete origin "$TAG_NAME"

            # Create the updated tag
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          else
            echo "Tag '$TAG_NAME' does not exist. Creating a new one."

            # Create the tag
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Create or Update Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "Release for tag '$TAG_NAME' already exists. Updating it."
            
            # Delete and recreate the release
            gh release delete "$TAG_NAME" -y
            gh release create "$TAG_NAME" --title "${{ env.PR_TITLE }}" --notes "${{ env.PR_BODY }}"
          else
            echo "Release for tag '$TAG_NAME' does not exist. Creating a new one."
            gh release create "$TAG_NAME" --title "${{ env.PR_TITLE }}" --notes "${{ env.PR_BODY }}"
          fi
